import me.modmuss50.mpp.ReleaseType

plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.3-SNAPSHOT" apply false
    id "me.modmuss50.mod-publish-plugin" version "0.4.5"
}

architectury {
    minecraft = rootProject.minecraft_version
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"
    apply from: "https://raw.githubusercontent.com/FTBTeam/mods-meta/main/gradle/git-md-changelog.gradle"

    base {
        archivesName = project.archives_base_name
    }

    version = project.mod_version
    group = project.maven_group
    archivesBaseName = project.archives_base_name

    // needs to be done AFTER version is set
    apply from: "https://raw.githubusercontent.com/FTBTeam/mods-meta/main/gradle/publishing.gradle"

    repositories {
        maven {
            url "https://maven.blamejared.com"
            content {
                includeGroup "mezz.jei"
            }
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.release = 17
    }

    java {
        withSourcesJar()
    }
}

subprojects {
    apply plugin: "dev.architectury.loom"
    apply plugin: "maven-publish"

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        // The following line declares the mojmap mappings, you may use other mappings as well
        mappings loom.officialMojangMappings()
        // The following line declares the yarn mappings you may select this one as well.
        // mappings "net.fabricmc:yarn:1.20.1+build.10:v2"
    }

    publishing {
        repositories {
            if (ftbPublishing.ftbToken) {
                maven {
                    url ftbPublishing.ftbURL
                    credentials {
                        username = ftbPublishing.ftbUser
                        password = ftbPublishing.ftbToken
                    }
                }
            }

            if (ftbPublishing.sapsToken) {
                maven {
                    url ftbPublishing.sapsURL
                    credentials {
                        username = ftbPublishing.sapsUser
                        password = ftbPublishing.sapsToken
                    }
                }
            }
        }
    }
}


//// TODO: Move this to a common location?
//Closure<ReleaseType> releaseTypeToPublishType = { type ->
//    switch(type) {
//        case "release": return ReleaseType.STABLE
//        case "beta": return ReleaseType.BETA
//        case "alpha": return ReleaseType.ALPHA
//        default: return ReleaseType.STABLE
//    }
//}

//publishMods {
//    dryRun = providers.environmentVariable("CURSEFORGE_TOKEN").getOrNull() == null
//    changelog = providers.environmentVariable("CHANGELOG").orElse("")
//    version = mod_version
//    type = releaseTypeToPublishType(ftbPublishing.relType)
//
//    def curseOptions = curseforgeOptions {
//        accessToken = providers.environmentVariable("CURSEFORGE_TOKEN")
//        projectId = project.curseforge_id
//        minecraftVersions.add(rootProject.minecraft_version)
//
//        requires {
//            slug = 'architectury-api'
//        }
//    }
//
//    curseforge("forge") {
//        from curseOptions
//        modLoaders.add("neoforge")
//        modLoaders.add("forge")
//        file = project(":forge").tasks.remapJar.archiveFile
//
//        requires {
//            slug = 'ftb-library-forge'
//            slug = 'architectury-api'
//        }
//    }
//
//    curseforge("fabric") {
//        from curseOptions
//
//        file = project(":fabric").tasks.remapJar.archiveFile
//        modLoaders.add("fabric")
//
//        requires {
//            slug = "fabric-api"
//            slug = 'ftb-library-fabric'
//        }
//    }
//
//    github {
//        repository = "ftbteam/ftb-economy"
//        accessToken = providers.environmentVariable("GITHUB_TOKEN")
//        commitish = providers.environmentVariable("GITHUB_SHA").orElse("dryRun")
//        tagName = providers.environmentVariable("GITHUB_REF_NAME").orElse("dryRun")
//
//        // Gradle doesn't like accessing the buildApi task directly so we need to use the provider
//        file = project.provider { project(":common").tasks.buildApi }.flatMap { it.archiveFile }
//    }
//}
