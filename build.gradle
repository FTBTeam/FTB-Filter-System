import me.modmuss50.mpp.ReleaseType

plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.3-SNAPSHOT" apply false
    id "me.modmuss50.mod-publish-plugin" version "0.5.1"
}

apply from: 'https://raw.githubusercontent.com/FTBTeam/mods-meta/main/gradle/changelog.gradle'

architectury {
    minecraft = rootProject.minecraft_version
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    base {
        archivesName = project.archives_base_name
    }

    version = project.mod_version
    group = project.maven_group
    archivesBaseName = project.archives_base_name

    // needs to be done AFTER version is set
    apply from: "https://raw.githubusercontent.com/FTBTeam/mods-meta/main/gradle/publishing.gradle"

    repositories {
        maven {
            url "https://maven.blamejared.com"
            content {
                includeGroup "mezz.jei"
            }
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.release = 17
    }

    java {
        withSourcesJar()
    }
}

subprojects {
    apply plugin: "dev.architectury.loom"
    apply plugin: "maven-publish"

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        mappings loom.officialMojangMappings()
    }

    publishing {
        repositories {
            if (ftbPublishing.ftbToken) {
                maven {
                    url ftbPublishing.ftbURL
                    credentials {
                        username = ftbPublishing.ftbUser
                        password = ftbPublishing.ftbToken
                    }
                }
            }

            if (ftbPublishing.sapsToken) {
                maven {
                    url ftbPublishing.sapsURL
                    credentials {
                        username = ftbPublishing.sapsUser
                        password = ftbPublishing.sapsToken
                    }
                }
            }
        }
    }
}

publishMods {
    dryRun = providers.environmentVariable("CURSEFORGE_KEY").getOrNull() == null
    changelog = createChangelog(project)
    version = mod_version
    def tag = providers.environmentVariable("TAG").getOrElse("release")
    type = tag.endsWith("-beta") ? BETA : (tag.endsWith("-alpha") ? ALPHA : STABLE)

    def curseOptions = curseforgeOptions {
        accessToken = providers.environmentVariable("CURSEFORGE_KEY")
        projectId = project.curseforge_id
        minecraftVersions.add(rootProject.minecraft_version)

        requires {
            slug = 'architectury-api'
        }
    }

    curseforge("forge") {
        from curseOptions
        modLoaders.add("neoforge")
        modLoaders.add("forge")
        file = project(":forge").tasks.remapJar.archiveFile
        displayName = "[FORGE] FTB Filter System ${mod_version} MC ${minecraft_version}"
    }

    curseforge("fabric") {
        from curseOptions
        modLoaders.add("fabric")
        file = project(":fabric").tasks.remapJar.archiveFile
        displayName = "[FABRIC] FTB Filter System ${mod_version} MC ${minecraft_version}"

        requires {
            slug = "fabric-api"
        }
    }
}
